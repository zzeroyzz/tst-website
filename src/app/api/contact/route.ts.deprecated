// src/app/api/contact/route.ts
import { NextResponse } from 'next/server';
import { createContactDirect, createNotificationDirect } from '@/lib/graphql/direct-resolvers';
import { sendZapierEmailWithRetry } from '@/lib/zapier-email-sender';
import { getContactConfirmationTemplate } from '@/lib/custom-email-templates';
import { createClient } from '@supabase/supabase-js';
import { randomUUID } from 'crypto';

// Fallback Supabase client for notifications (not yet in GraphQL)
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: Request) {
  const { name, email, phone } = await request.json();

  if (!email) {
    return NextResponse.json({ error: 'Email is required.' }, { status: 400 });
  }

  try {
    // Check for existing contact via direct Supabase (faster for simple check)
    const { data: existingContact, error: checkError } = await supabase
      .from('contacts')
      .select('id, email, name')
      .eq('email', email.toLowerCase())
      .single();

    if (existingContact) {
      return NextResponse.json(
        {
          error:
            'An account with this email already exists. Please contact care@toastedsesametherapy.com directly for assistance.',
          contactExists: true,
        },
        { status: 409 }
      );
    }

    if (checkError && checkError.code !== 'PGRST116') {
      console.error('Database check error:', checkError);
      throw new Error('Failed to check existing contacts');
    }

    const questionnaireToken = randomUUID();

    // Create contact via GraphQL resolver (direct call to avoid circular dependency)
    let newContact;
    try {
      newContact = await createContactDirect({
        name,
        email: email.toLowerCase(),
        phoneNumber: phone,
        segments: ['Contact Form Lead'],
        crmNotes: `Contact form submission on ${new Date().toLocaleDateString()}`,
        customFields: {
          questionnaireToken,
          source: 'contact_form',
          submittedAt: new Date().toISOString()
        }
      });
      
      if (!newContact) {
        throw new Error('No contact data returned from GraphQL resolver');
      }
    } catch (graphqlError: any) {
      console.error('GraphQL contact creation error:', graphqlError);
      
      // Check for duplicate email in error message
      if (graphqlError.message && (
        graphqlError.message.includes('duplicate') || 
        graphqlError.message.includes('unique') ||
        graphqlError.message.includes('already exists')
      )) {
        return NextResponse.json(
          {
            error: 'An account with this email already exists. Please contact care@toastedsesametherapy.com directly for assistance.',
            contactExists: true,
          },
          { status: 409 }
        );
      }

      throw new Error(`Failed to create contact via GraphQL: ${graphqlError.message}`);
    }

    // Update contact with questionnaire token (not yet in GraphQL schema)
    const { error: tokenUpdateError } = await supabase
      .from('contacts')
      .update({ 
        questionnaire_token: questionnaireToken,
        questionnaire_completed: false 
      })
      .eq('id', newContact.id);

    if (tokenUpdateError) {
      console.error('Failed to add questionnaire token:', tokenUpdateError);
    }

    // 3. Send confirmation email via Zapier
    try {
      const emailTemplate = getContactConfirmationTemplate({ name });
      await sendZapierEmailWithRetry({
        to: email,
        subject: 'Thanks for reaching out! Next steps inside üìù',
        html: emailTemplate,
      });
    } catch (emailError) {
      console.error('Failed to send confirmation email:', emailError);
    }

    // Create notification via GraphQL
    try {
      const serverApolloClient = getServerApolloClient();
      await serverApolloClient.mutate({
        mutation: CREATE_NOTIFICATION,
        variables: {
          input: {
            type: 'contact',
            title: 'New Contact Submission',
            message: `${name} submitted the contact form via GraphQL integration`,
            contactId: newContact.id,
            contactName: name,
            contactEmail: email.toLowerCase()
          }
        }
      });
    } catch (notificationError) {
      console.error('Failed to create notification via GraphQL:', notificationError);
      
      // Fallback to direct Supabase
      try {
        await supabase
          .from('notifications')
          .insert({
            type: 'contact',
            title: 'New Contact Submission',
            message: `${name} submitted the contact form via GraphQL integration`,
            contact_id: newContact.id,
            contact_name: name,
            contact_email: email.toLowerCase(),
            read: false,
            created_at: new Date().toISOString(),
          });
      } catch (fallbackError) {
        console.error('Failed to create notification via fallback:', fallbackError);
      }
    }
    return NextResponse.json(
      {
        message: 'Contact saved successfully!',
        questionnaireToken: questionnaireToken,
        contactId: newContact.id,
      },
      { status: 200 }
    );
  } catch (error) {
    console.error('Contact API error:', error);
    return NextResponse.json(
      {
        error:
          'An unexpected error occurred. Please try again or contact care@toastedsesametherapy.com for assistance.',
      },
      { status: 500 }
    );
  }
}
